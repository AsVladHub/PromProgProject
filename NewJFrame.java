/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author HP
 */

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.zip.*;

import javax.swing.*;
import java.awt.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.*;

import javax.script.ScriptEngineManager;
import javax.script.ScriptEngine;
import javax.script.ScriptException;

import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;


import org.json.JSONArray;
import org.json.JSONObject;

import org.w3c.dom.*;
import javax.swing.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.*;
import javax.swing.filechooser.FileNameExtensionFilter;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.*;
import java.io.*;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;



public class NewJFrame extends javax.swing.JFrame {

    static String StFile = "C:\\Users\\HP\\Desktop\\input_files";
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Readtxtbutton = new javax.swing.JButton();
        Readjsonbutton = new javax.swing.JButton();
        Readxmlbutton = new javax.swing.JButton();
        Archivezip = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        Writetxt = new javax.swing.JButton();
        Writejson = new javax.swing.JButton();
        writexml = new javax.swing.JButton();
        solve = new javax.swing.JButton();
        Dearchivezip = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        Erase = new javax.swing.JButton();
        Encryption = new javax.swing.JButton();
        Decryption = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Калькулятор");
        setMinimumSize(new java.awt.Dimension(900, 4500));
        setPreferredSize(new java.awt.Dimension(1400, 750));

        Readtxtbutton.setText("Чтение файла .txt");
        Readtxtbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadtxtbuttonActionPerformed(evt);
            }
        });

        Readjsonbutton.setText("Чтение файла .json");
        Readjsonbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadjsonbuttonActionPerformed(evt);
            }
        });

        Readxmlbutton.setText("Чтение файла .xml");
        Readxmlbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadxmlbuttonActionPerformed(evt);
            }
        });

        Archivezip.setText("Архивировать в .zip");
        Archivezip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArchivezipActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        Writetxt.setText("Записать в .txt");
        Writetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WritetxtActionPerformed(evt);
            }
        });

        Writejson.setText("Записать в .json");
        Writejson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WritejsonActionPerformed(evt);
            }
        });

        writexml.setText("Записать в .xml");
        writexml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writexmlActionPerformed(evt);
            }
        });

        solve.setText("Решить !!!");
        solve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveActionPerformed(evt);
            }
        });

        Dearchivezip.setText("Разархивировать из .zip");
        Dearchivezip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DearchivezipActionPerformed(evt);
            }
        });

        Exit.setText("Выйти");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        Erase.setText("Очистить");
        Erase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EraseActionPerformed(evt);
            }
        });

        Encryption.setText("Зашифровать");
        Encryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptionActionPerformed(evt);
            }
        });

        Decryption.setText("Дешифровать");
        Decryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Readxmlbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Readjsonbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Readtxtbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Writetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Writejson, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(writexml, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(Erase)
                        .addGap(96, 96, 96)
                        .addComponent(solve, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Archivezip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Dearchivezip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Encryption, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Decryption, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(69, 69, 69)
                        .addComponent(Exit)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(190, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Readtxtbutton)
                            .addComponent(Archivezip)
                            .addComponent(Writetxt)
                            .addComponent(Encryption))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Readjsonbutton)
                            .addComponent(Writejson)
                            .addComponent(Dearchivezip)
                            .addComponent(Decryption)))
                    .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Readxmlbutton)
                    .addComponent(writexml)
                    .addComponent(solve)
                    .addComponent(Erase))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ReadtxtbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadtxtbuttonActionPerformed
        // Создание JFileChooser
    JFileChooser fileChooser = new JFileChooser(StFile);
    fileChooser.setDialogTitle("Выберите файл .txt");
    fileChooser.setFileFilter(new FileNameExtensionFilter("TEXT Files", "txt"));
    
    // Показываем диалог выбора файла
    int userSelection = fileChooser.showOpenDialog(this);

    // Если пользователь выбрал файл
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        java.io.File fileToRead = fileChooser.getSelectedFile();
        readFile(fileToRead);
    }
    }//GEN-LAST:event_ReadtxtbuttonActionPerformed

    private void WritetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WritetxtActionPerformed
        JFileChooser fileChooser = new JFileChooser(StFile);
        fileChooser.setDialogTitle("Сохранить файл .txt");
        fileChooser.setFileFilter(new FileNameExtensionFilter("TEXT Files", "txt"));
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            writeFile(fileToSave);
        }
    }//GEN-LAST:event_WritetxtActionPerformed

    private void WritejsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WritejsonActionPerformed
        JsonFileHandler.writeJsonFile(jTextArea1, this);
    }//GEN-LAST:event_WritejsonActionPerformed

    private void ReadjsonbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadjsonbuttonActionPerformed
        JsonFileHandler.readJsonFile(jTextArea1, this);
        
    }//GEN-LAST:event_ReadjsonbuttonActionPerformed

    private void ReadxmlbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadxmlbuttonActionPerformed
         XmlFileHandler.readXmlFile(jTextArea1, this);
    }//GEN-LAST:event_ReadxmlbuttonActionPerformed

    private void writexmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writexmlActionPerformed
        XmlFileHandler.writeXmlFile(jTextArea1, this);
    }//GEN-LAST:event_writexmlActionPerformed

    private void solveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveActionPerformed
        String text = jTextArea1.getText();
    String[] lines = text.split("\n");
    StringBuilder result = new StringBuilder();

    for (String line : lines) {
        String expression = line.trim();  // Удаляем лишние пробелы
        String answer = MathSolver.solve(expression);
        result.append(answer).append("\n");  // Добавляем только ответ
    }

    jTextArea2.setText(result.toString()); // Записываем ответы в jTextArea2
    }//GEN-LAST:event_solveActionPerformed

    private void ArchivezipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArchivezipActionPerformed
        ZipUtility zipUtility = new ZipUtility();
        zipUtility.archiveFile();
    }//GEN-LAST:event_ArchivezipActionPerformed

    private void DearchivezipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DearchivezipActionPerformed
        ZipUtility zipUtility = new ZipUtility();
        zipUtility.dearchiveFile();
    }//GEN-LAST:event_DearchivezipActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void EraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EraseActionPerformed
        jTextArea1.setText("");
        jTextArea2.setText("");
    }//GEN-LAST:event_EraseActionPerformed

    private void EncryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptionActionPerformed
        try {
        // Открыть диалог выбора файла для шифрования
        JFileChooser fileChooser = new JFileChooser(StFile);
        int returnValue = fileChooser.showOpenDialog(this);

        if (returnValue != JFileChooser.APPROVE_OPTION) {
            return; // В случае отмены
        }

        File selectedFile = fileChooser.getSelectedFile();

        // Генерация ключа для AES
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128); // Длина ключа 128 бит
        SecretKey secretKey = keyGen.generateKey();

        // Шифрование файла
        FileEncryptor.encryptFile(selectedFile.getAbsolutePath(), secretKey);

        // Показать ключ для шифрования в текстовой области
        String keyString = Base64.getEncoder().encodeToString(secretKey.getEncoded());
        JTextArea textArea = new JTextArea(5, 30);
        textArea.setText("Ключ для дешифровки:\n" + keyString);
        textArea.setEditable(false); // Отключение редактирования текстовой области
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        
        JScrollPane scrollPane = new JScrollPane(textArea);
        JOptionPane.showMessageDialog(this, scrollPane, "Скопируйте ключ", JOptionPane.INFORMATION_MESSAGE);

    } catch (Exception e) {
        e.printStackTrace();
        // Показать сообщение об ошибке
        JOptionPane.showMessageDialog(this, "Ошибка при шифровании: " + e.getMessage());
    }
    }//GEN-LAST:event_EncryptionActionPerformed

    private void DecryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptionActionPerformed
        try {
        // Открыть диалог выбора файла для дешифрования
        JFileChooser fileChooser = new JFileChooser(StFile);
        int returnValue = fileChooser.showOpenDialog(this);
        
        if (returnValue != JFileChooser.APPROVE_OPTION) {
            return; // В случае отмены
        }

        File selectedFile = fileChooser.getSelectedFile();

        // Ввод ключа для дешифрования
        String keyString = JOptionPane.showInputDialog(this, "Введите ключ для дешифровки:");
        if (keyString == null || keyString.isEmpty()) {
            return; // Проверка на случай, если пользователь нажмет "Отмена"
        }

        // Дешифрование файла
        FileEncryptor.decryptFile(selectedFile.getAbsolutePath(), keyString);

    } catch (Exception e) {
        e.printStackTrace();
        // Показать сообщение об ошибке
        JOptionPane.showMessageDialog(this, "Ошибка при дешифровке: " + e.getMessage());
    }
    }//GEN-LAST:event_DecryptionActionPerformed

    private void readFile(java.io.File file) {
        StringBuilder content = new StringBuilder();
        
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                content.append(line).append("\n"); // Считываем все строки файла
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Ошибка при чтении файла", "Ошибка", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

        // Отображаем содержимое в JTextField
        jTextArea1.setText(content.toString().trim()); // Убираем последний перевод строки
    }
    
    private void writeFile(File file) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            // Записываем текст из JTextArea в файл
            writer.write(jTextArea1.getText());
            JOptionPane.showMessageDialog(this, "Успешно записано в файл .txt");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Ошибка при записи файла", "Ошибка", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    
    class JsonFileHandler {
    
    public static void writeJsonFile(JTextArea textArea, JFrame parent) {
        JFileChooser fileChooser = new JFileChooser(StFile);
       // fileChooser.setCurrentDirectory(new File("C:"));
        
        fileChooser.setDialogTitle("Сохранить файл .json");
        fileChooser.setFileFilter(new FileNameExtensionFilter("JSON Files", "json"));
        int userSelection = fileChooser.showSaveDialog(parent);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            // Убедитесь, что файл имеет расширение .json
            if (!fileToSave.getName().endsWith(".json")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".json");
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                JSONArray jsonArray = new JSONArray();
                String[] expressions = textArea.getText().split("\n");
                
                for (String expression : expressions) {
                    JSONObject jsonObject = new JSONObject();
                    jsonObject.put("math_expression", expression);
                    jsonArray.put(jsonObject);
                }
                
                writer.write(jsonArray.toString(4)); // Запись формата JSON с отступами
                JOptionPane.showMessageDialog(parent, "Успешно записано в файл .json");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(parent, "Ошибка при записи в файл JSON", "Ошибка", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    public static void readJsonFile(JTextArea textArea, JFrame parent) {
    JFileChooser fileChooser = new JFileChooser(StFile);
    //fileChooser.setCurrentDirectory(new File("C:"));
    fileChooser.setDialogTitle("Выберите файл .json");
    fileChooser.setFileFilter(new FileNameExtensionFilter("JSON Files", "json"));
    int userSelection = fileChooser.showOpenDialog(parent);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToRead = fileChooser.getSelectedFile();
        String fileContent = "";

        try (FileReader reader = new FileReader(fileToRead)) {
            int character;
            while ((character = reader.read()) != -1) {
                fileContent += (char) character;
            }

            JSONArray jsonArray = new JSONArray(fileContent);
            StringBuilder content = new StringBuilder();
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                content.append(jsonObject.getString("math_expression")).append("\n");
            }

            textArea.setText(content.toString());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(parent, "Ошибка при чтении файла JSON", "Ошибка", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }
    }

    
    class XmlFileHandler {

    public static void writeXmlFile(JTextArea textArea, JFrame parent) {
        JFileChooser fileChooser = new JFileChooser(StFile);
        fileChooser.setDialogTitle("Сохранить файл .xml");
        fileChooser.setFileFilter(new FileNameExtensionFilter("XML Files", "xml"));
        int userSelection = fileChooser.showSaveDialog(parent);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            // Убедитесь, что файл имеет расширение .xml
            if (!fileToSave.getName().endsWith(".xml")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".xml");
            }

            try {
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                Document document = builder.newDocument();

                // Создание корневого элемента
                Element root = document.createElement("math_expressions");
                document.appendChild(root);

                // Получение выражений из JTextArea
                String[] expressions = textArea.getText().split("\n");

                for (String expression : expressions) {
                    Element expressionElement = document.createElement("expression");

                    Element mathElem = document.createElement("math_expression");
                    mathElem.appendChild(document.createTextNode(expression));
                    expressionElement.appendChild(mathElem);

                    root.appendChild(expressionElement);
                }

                // Запись содержимого в файл
                TransformerFactory transformerFactory = TransformerFactory.newInstance();
                Transformer transformer = transformerFactory.newTransformer();
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                DOMSource source = new DOMSource(document);
                StreamResult result = new StreamResult(fileToSave);
                transformer.transform(source, result);

                JOptionPane.showMessageDialog(parent, "Успешно записано в файл .xml");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(parent, "Ошибка при записи в файл XML", "Ошибка", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    public static void readXmlFile(JTextArea textArea, JFrame parent) {
        JFileChooser fileChooser = new JFileChooser(StFile);
        fileChooser.setDialogTitle("Выберите файл .xml");
        fileChooser.setFileFilter(new FileNameExtensionFilter("XML Files", "xml"));
        int userSelection = fileChooser.showOpenDialog(parent);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToRead = fileChooser.getSelectedFile();
            StringBuilder content = new StringBuilder();

            try {
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                Document document = builder.parse(fileToRead);
                document.getDocumentElement().normalize();

                NodeList nodeList = document.getElementsByTagName("expression");

                for (int i = 0; i < nodeList.getLength(); i++) {
                    Element element = (Element) nodeList.item(i);
                    String expression = element.getElementsByTagName("math_expression").item(0).getTextContent();
                    content.append(expression).append("\n");
                }

                textArea.setText(content.toString());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(parent, "Ошибка при чтении файла XML", "Ошибка", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }
}
    
    
    class MathSolver {
    public static String solve(String expression) {
        // Вход в контекст Rhino для выполнения скрипта
        Context ctx = Context.enter();
        String resultString;

        try {
            // Инициализация области видимости (scope)
            Scriptable scope = ctx.initStandardObjects();

            // Выполнение выражения
            Object result = ctx.evaluateString(scope, expression, "JavaScript", 1, null);
            
            // Преобразование результата в строку
            resultString = Context.toString(result);
        } catch (Exception e) {
            resultString = "Error: " + e.getMessage(); // Обработка ошибок
        } finally {
            // Выход из контекста
            Context.exit();
        }
        
        return resultString; // Возврат результата
    }
    }
    
    
    
    public class ZipUtility {

    // Метод для архивирования файла
    public void archiveFile() {
        JFileChooser fileChooser = new JFileChooser(StFile);
        fileChooser.setDialogTitle("Выберите файл для архивации");
        
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            // Получаем имя файла без расширения
            String fileNameWithoutExtension = selectedFile.getName().substring(0, selectedFile.getName().lastIndexOf('.'));
            String zipFileName = selectedFile.getParent() + File.separator + fileNameWithoutExtension + ".zip";

            try {
                try (FileOutputStream fos = new FileOutputStream(zipFileName);
                     ZipOutputStream zos = new ZipOutputStream(fos);
                     FileInputStream fis = new FileInputStream(selectedFile)) {

                    ZipEntry zipEntry = new ZipEntry(selectedFile.getName());
                    zos.putNextEntry(zipEntry);

                    byte[] buffer = new byte[1024];
                    int length;
                    while ((length = fis.read(buffer)) > 0) {
                        zos.write(buffer, 0, length);
                    }
                    zos.closeEntry();
                }

                // Удаляем оригинальный файл после архивации
                if (selectedFile.delete()) {
                    JOptionPane.showMessageDialog(null, "Файл успешно заархивирован и удалён: " + zipFileName);
                } else {
                    JOptionPane.showMessageDialog(null, "Файл успешно заархивирован, но не удалось удалить оригинал.");
                }

            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Ошибка при архивировании файла.");
            }
        }
    }

    
    // Метод для разархивирования файла
public void dearchiveFile() {
    JFileChooser fileChooser = new JFileChooser(StFile);
    fileChooser.setDialogTitle("Выберите файл для разархивации");
    fileChooser.setFileFilter(new FileNameExtensionFilter("ZIP Files", "zip"));
        
    if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        File selectedZipFile = fileChooser.getSelectedFile();
        File destDir = selectedZipFile.getParentFile();

        StringBuilder message = new StringBuilder(); 

        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(selectedZipFile))) {
            ZipEntry zipEntry;
            while ((zipEntry = zis.getNextEntry()) != null) {
                File newFile = new File(destDir, zipEntry.getName());
                try (FileOutputStream fos = new FileOutputStream(newFile)) {
                    byte[] buffer = new byte[1024];
                    int length;
                    while ((length = zis.read(buffer)) > 0) {
                        fos.write(buffer, 0, length);
                    }
                }
                zis.closeEntry();
            }
            message.append("Файл успешно разархивирован в: ").append(destDir.getAbsolutePath()).append("\n");

            
            try {
                Thread.sleep(200); 
            } catch (InterruptedException e) {
                e.printStackTrace();
                message.append("Ошибка во время ожидания перед удалением.");
            }

            // Попробуем удалить архивный файл
            if (selectedZipFile.delete()) {
                message.append("Архивный файл успешно удален: ").append(selectedZipFile.getAbsolutePath());
            } else {
                // Если удаление не удалось, пометим файл на удаление при завершении программы
                selectedZipFile.deleteOnExit();
                message.append("Не удалось удалить архивный файл: ").append(selectedZipFile.getAbsolutePath())
                        .append("\nФайл будет удален при завершении программы.");
            }

        } catch (IOException ex) {
            ex.printStackTrace();
            message.append("Ошибка при разархивировании файла.");
        }

        // итоговое сообщение
        JOptionPane.showMessageDialog(null, message.toString());
    }
    }
}
    
    
    
    public class FileEncryptor {

    private static final String ALGORITHM = "AES";

    public static void encryptFile(String filePath, SecretKey secretKey) throws Exception {
        File inputFile = new File(filePath);
        File encryptedFile = new File(filePath + ".enc");

        // Создание шифратора
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);

        try (FileInputStream fis = new FileInputStream(inputFile);
             FileOutputStream fos = new FileOutputStream(encryptedFile)) {

            byte[] inputBuffer = new byte[1024];
            byte[] outputBuffer;
            int bytesRead;

            while ((bytesRead = fis.read(inputBuffer)) != -1) {
                outputBuffer = cipher.update(inputBuffer, 0, bytesRead);
                if (outputBuffer != null) {
                    fos.write(outputBuffer);
                }
            }
            outputBuffer = cipher.doFinal();
            if (outputBuffer != null) {
                fos.write(outputBuffer);
            }
        }

        // Удаление исходного файла
        if (inputFile.delete()) {
            System.out.println("Исходный файл удалён.");
        } else {
            System.out.println("Не удалось удалить исходный файл.");
        }
    }

    public static void decryptFile(String filePath, String keyString) throws Exception {
        File encryptedFile = new File(filePath);
        File decryptedFile = new File(filePath.replace(".enc", ""));

        // Восстановление ключа
        byte[] decodedKey = Base64.getDecoder().decode(keyString);
        SecretKey secretKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, ALGORITHM);

        // Создание дешифратора
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);

        try (FileInputStream fis = new FileInputStream(encryptedFile);
             FileOutputStream fos = new FileOutputStream(decryptedFile)) {

            byte[] inputBuffer = new byte[1024];
            byte[] outputBuffer;
            int bytesRead;

            while ((bytesRead = fis.read(inputBuffer)) != -1) {
                outputBuffer = cipher.update(inputBuffer, 0, bytesRead);
                if (outputBuffer != null) {
                    fos.write(outputBuffer);
                }
            }
            outputBuffer = cipher.doFinal();
            if (outputBuffer != null) {
                fos.write(outputBuffer);
            }
        }

        // Удаление зашифрованного файла
        if (encryptedFile.delete()) {
            System.out.println("Зашифрованный файл удалён.");
        } else {
            System.out.println("Не удалось удалить зашифрованный файл.");
        }
    }
}
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Archivezip;
    private javax.swing.JButton Dearchivezip;
    private javax.swing.JButton Decryption;
    private javax.swing.JButton Encryption;
    private javax.swing.JButton Erase;
    private javax.swing.JButton Exit;
    private javax.swing.JButton Readjsonbutton;
    private javax.swing.JButton Readtxtbutton;
    private javax.swing.JButton Readxmlbutton;
    private javax.swing.JButton Writejson;
    private javax.swing.JButton Writetxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton solve;
    private javax.swing.JButton writexml;
    // End of variables declaration//GEN-END:variables
}
